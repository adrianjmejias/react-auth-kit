{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udd11 Authenticate users in React applications \ud83d\udd11 Introduction React Auth Kit is a lightweight Javascript library for React JS, which makes the implementation of Token based authentication very easy It is production-ready, and gives you the following: 1.81 KB Gzipped Build for React Easy to Implementation Supports Json Web Token (JWT) Secure Client Side Authentication Highly typed and written in TypeScript Can be implemented using both Higher Order Components and React Hooks 100% test coverage. 100% type annotated codebase. Zero hard dependencies. Requirements Node Js 8.0+ React Js 16.8+ React-Router-Dom \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Introduction"},{"location":"#introduction","text":"React Auth Kit is a lightweight Javascript library for React JS, which makes the implementation of Token based authentication very easy It is production-ready, and gives you the following: 1.81 KB Gzipped Build for React Easy to Implementation Supports Json Web Token (JWT) Secure Client Side Authentication Highly typed and written in TypeScript Can be implemented using both Higher Order Components and React Hooks 100% test coverage. 100% type annotated codebase. Zero hard dependencies.","title":"Introduction"},{"location":"#requirements","text":"Node Js 8.0+ React Js 16.8+ React-Router-Dom \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Requirements"},{"location":"authdata/","text":"Auth User Data Get the Authorized user's state from any Component simply by using HOC or Hooks To get the Authorized user's state from Higher Order Components , use withAuth To get the Authorized user's state using React Hooks , use useAuth Using Hooks import {useAuth} from 'react-auth-kit' Demo import React from 'react' import {useAuth} from 'react-auth-kit' const SomeComponent = () => { const auth = useAuth() return( <div> Hello {auth.user} </div> ) } Using Higher Order Component import {withAuth} from 'react-auth-kit' Demo import React from 'react' import {withAuth} from 'react-auth-kit' class SomeComponent extends React.Component { render(){ return ( <div> Hello {this.props.authState.user} </div> ) } } export default withAuth(SomeComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Auth User Data"},{"location":"authdata/#auth-user-data","text":"Get the Authorized user's state from any Component simply by using HOC or Hooks To get the Authorized user's state from Higher Order Components , use withAuth To get the Authorized user's state using React Hooks , use useAuth","title":"Auth User Data"},{"location":"authdata/#using-hooks","text":"import {useAuth} from 'react-auth-kit'","title":"Using Hooks"},{"location":"authdata/#demo","text":"import React from 'react' import {useAuth} from 'react-auth-kit' const SomeComponent = () => { const auth = useAuth() return( <div> Hello {auth.user} </div> ) }","title":"Demo"},{"location":"authdata/#using-higher-order-component","text":"import {withAuth} from 'react-auth-kit'","title":"Using Higher Order Component"},{"location":"authdata/#demo_1","text":"import React from 'react' import {withAuth} from 'react-auth-kit' class SomeComponent extends React.Component { render(){ return ( <div> Hello {this.props.authState.user} </div> ) } } export default withAuth(SomeComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Demo"},{"location":"authheader/","text":"Auth Header Get the Auth Header for future request from any Component simply by using HOC or Hooks To get the Auth Header from Higher Order Components , use withAuthHeader To get the Auth Header using React Hooks , use useAuthHeader Using Hooks import {useAuthHeader} from 'react-auth-kit' Demo import React from 'react' import {useAuthHeader} from 'react-auth-kit' const SomeComponent = () => { const authHeader = useAuthHeader() return( <div> {authHeader} </div> ) } Using Higher Order Component import {withAuth} from 'react-auth-kit' Demo import React from 'react' import {withAuthHeader} from 'react-auth-kit' class SomeComponent extends React.Component { render(){ return ( <div> {this.props.authHeader} </div> ) } } export default withAuthHeader(SomeComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Auth Header"},{"location":"authheader/#auth-header","text":"Get the Auth Header for future request from any Component simply by using HOC or Hooks To get the Auth Header from Higher Order Components , use withAuthHeader To get the Auth Header using React Hooks , use useAuthHeader","title":"Auth Header"},{"location":"authheader/#using-hooks","text":"import {useAuthHeader} from 'react-auth-kit'","title":"Using Hooks"},{"location":"authheader/#demo","text":"import React from 'react' import {useAuthHeader} from 'react-auth-kit' const SomeComponent = () => { const authHeader = useAuthHeader() return( <div> {authHeader} </div> ) }","title":"Demo"},{"location":"authheader/#using-higher-order-component","text":"import {withAuth} from 'react-auth-kit'","title":"Using Higher Order Component"},{"location":"authheader/#demo_1","text":"import React from 'react' import {withAuthHeader} from 'react-auth-kit' class SomeComponent extends React.Component { render(){ return ( <div> {this.props.authHeader} </div> ) } } export default withAuthHeader(SomeComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Demo"},{"location":"installation/","text":"Installation Using Package Manager Using NPM npm install --save react-auth-kit Using Yarn yarn add react-auth-kit Using CDN Unpkg https://unpkg.com/react-auth-kit/dist/index.umd.js JsDelivr https://cdn.jsdelivr.net/npm/react-auth-kit/dist/index.umd.js","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#using-package-manager","text":"","title":"Using Package Manager"},{"location":"installation/#using-npm","text":"npm install --save react-auth-kit","title":"Using NPM"},{"location":"installation/#using-yarn","text":"yarn add react-auth-kit","title":"Using Yarn"},{"location":"installation/#using-cdn","text":"","title":"Using CDN"},{"location":"installation/#unpkg","text":"https://unpkg.com/react-auth-kit/dist/index.umd.js","title":"Unpkg"},{"location":"installation/#jsdelivr","text":"https://cdn.jsdelivr.net/npm/react-auth-kit/dist/index.umd.js","title":"JsDelivr"},{"location":"privateroute/","text":"Private Route Implement Private Route on your React App React Auth Kit has a PrivateRoute functionality Based on React Router Import import {PrivateRoute} from 'react-auth-kit' Implementation Add PrivateRoute in your Routes Files inside BrowserRouter or HashRouter Demo <BrowserRouter> <PrivateRoute component={privateComponent} path={'/privateRoute'} loginPath={'/loginPath'} exact/> </BrowserRouter> Full Code import React from \"react\" import {BrowserRouter, Route} from \"react-router-dom\" import { PrivateRoute } from 'react-auth-kit' const Routes = () => { return ( <BrowserRouter> <Route component={LoginComponent} path={'/login'} exact/> <PrivateRoute component={privateComponent} path={'/privateRoute'} loginPath={'/loginPath'} exact/> </BrowserRouter> ) } Props As PrivateRoute is a derived version of Route from React-Router , that's why the props are same as Route props. Check this link . Added Prop : loginPath ( Require ): The fallback path, if the user is unauthorized. \u26a0 The only big difference is PrivateRoute doesn't support children prop. So please don't use that. \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Private Route"},{"location":"privateroute/#private-route","text":"Implement Private Route on your React App React Auth Kit has a PrivateRoute functionality Based on React Router","title":"Private Route"},{"location":"privateroute/#import","text":"import {PrivateRoute} from 'react-auth-kit'","title":"Import"},{"location":"privateroute/#implementation","text":"Add PrivateRoute in your Routes Files inside BrowserRouter or HashRouter","title":"Implementation"},{"location":"privateroute/#demo","text":"<BrowserRouter> <PrivateRoute component={privateComponent} path={'/privateRoute'} loginPath={'/loginPath'} exact/> </BrowserRouter> Full Code import React from \"react\" import {BrowserRouter, Route} from \"react-router-dom\" import { PrivateRoute } from 'react-auth-kit' const Routes = () => { return ( <BrowserRouter> <Route component={LoginComponent} path={'/login'} exact/> <PrivateRoute component={privateComponent} path={'/privateRoute'} loginPath={'/loginPath'} exact/> </BrowserRouter> ) }","title":"Demo"},{"location":"privateroute/#props","text":"As PrivateRoute is a derived version of Route from React-Router , that's why the props are same as Route props. Check this link . Added Prop : loginPath ( Require ): The fallback path, if the user is unauthorized. \u26a0 The only big difference is PrivateRoute doesn't support children prop. So please don't use that. \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Props"},{"location":"signin/","text":"Sign In Implement Sign In on your React App React Auth Kit has easy to implement Sign In procedures. It supports both Hooks and Higher Order Component for both Functional Components and Class-based Components Sign In using Hooks Sign In using Hooks need useSignIn hook import { useSignIn } from 'react-auth-kit' Demo import { useSignIn } from 'react-auth-kit' const SignInComponent = () => { const signIn = useSignIn() ... const onSubmit = (e) => { ... if(signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } return ( ... ) } Full Code import React from \"react\" import axios from 'axios' import { useSignIn } from 'react-auth-kit' const SignInComponent = () => { const signIn = useSignIn() const [formData, setFormData] = React.useState({email: '', password: ''}) const onSubmit = (e) => { e.preventDefault() axios.post('/api/login', formData) .then((res)=>{ if(res.status === 200){ if(signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } }) } return ( <form onSubmit={onSubmit}> <input type={\"email\"} onChange={(e)=>setFormData({...formData, email: e.target.value})}/> <input type={\"password\"} onChange={(e)=>setFormData({...formData, password: e.target.value})}/> <button>Submit</button> </form> ) } Sign In using Higher Order Component Sign In using Higher Order Component using withSignIn import { withSignIn } from 'react-auth-kit' Demo import { withSignIn } from 'react-auth-kit' class signInComponent extends React.Component { const onSubmit = (e) => { ... if(this.props.signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } render(){ ... } } export default withSignIn(signInComponent) Full Code import React from 'react' import axios from 'axios' import { withSignIn } from 'react-auth-kit' class signInComponent extends React.Component { state={email: '', password: ''} onSubmit = (e) => { e.preventDefault() axios.post('/api/login', this.state) .then((res)=>{ if(res.status === 200){ if(this.props.signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } }) } render(){ return ( <form onSubmit={onSubmit}> <input type={\"email\"} onChange={(e)=>this.setState({...this.state, email: e.target.value})}/> <input type={\"password\"} onChange={(e)=>this.setState({...this.state, password: e.target.value})}/> <button>Submit</button> </form> ) } } export default withSignIn(signInComponent) Sign In Function Parameters The Sign in function takes only 1 parameter, which is an JavaScript object . Using the Object, you provide all necessary arguments and signIn. Interface of the Sign In Object declare interface signInFunctionParams { token: string, tokenType: string | 'Bearer', expiresIn: number, authState: object } Explanation of the Sign In Object Name Type Description token string The Authentication token to be stored from server tokenType string | 'Bearer' The type of authentication token. expiresIn number The time for which the token will last, in minutes authState object State of the authorized user. Eg: {name: Jhon, email: jhon@auth.com} \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Sign In"},{"location":"signin/#sign-in","text":"Implement Sign In on your React App React Auth Kit has easy to implement Sign In procedures. It supports both Hooks and Higher Order Component for both Functional Components and Class-based Components","title":"Sign In"},{"location":"signin/#sign-in-using-hooks","text":"Sign In using Hooks need useSignIn hook import { useSignIn } from 'react-auth-kit'","title":"Sign In using Hooks"},{"location":"signin/#demo","text":"import { useSignIn } from 'react-auth-kit' const SignInComponent = () => { const signIn = useSignIn() ... const onSubmit = (e) => { ... if(signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } return ( ... ) } Full Code import React from \"react\" import axios from 'axios' import { useSignIn } from 'react-auth-kit' const SignInComponent = () => { const signIn = useSignIn() const [formData, setFormData] = React.useState({email: '', password: ''}) const onSubmit = (e) => { e.preventDefault() axios.post('/api/login', formData) .then((res)=>{ if(res.status === 200){ if(signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } }) } return ( <form onSubmit={onSubmit}> <input type={\"email\"} onChange={(e)=>setFormData({...formData, email: e.target.value})}/> <input type={\"password\"} onChange={(e)=>setFormData({...formData, password: e.target.value})}/> <button>Submit</button> </form> ) }","title":"Demo"},{"location":"signin/#sign-in-using-higher-order-component","text":"Sign In using Higher Order Component using withSignIn import { withSignIn } from 'react-auth-kit'","title":"Sign In using Higher Order Component"},{"location":"signin/#demo_1","text":"import { withSignIn } from 'react-auth-kit' class signInComponent extends React.Component { const onSubmit = (e) => { ... if(this.props.signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } render(){ ... } } export default withSignIn(signInComponent) Full Code import React from 'react' import axios from 'axios' import { withSignIn } from 'react-auth-kit' class signInComponent extends React.Component { state={email: '', password: ''} onSubmit = (e) => { e.preventDefault() axios.post('/api/login', this.state) .then((res)=>{ if(res.status === 200){ if(this.props.signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } }) } render(){ return ( <form onSubmit={onSubmit}> <input type={\"email\"} onChange={(e)=>this.setState({...this.state, email: e.target.value})}/> <input type={\"password\"} onChange={(e)=>this.setState({...this.state, password: e.target.value})}/> <button>Submit</button> </form> ) } } export default withSignIn(signInComponent)","title":"Demo"},{"location":"signin/#sign-in-function-parameters","text":"The Sign in function takes only 1 parameter, which is an JavaScript object . Using the Object, you provide all necessary arguments and signIn.","title":"Sign In Function Parameters"},{"location":"signin/#interface-of-the-sign-in-object","text":"declare interface signInFunctionParams { token: string, tokenType: string | 'Bearer', expiresIn: number, authState: object }","title":"Interface of the Sign In Object"},{"location":"signin/#explanation-of-the-sign-in-object","text":"Name Type Description token string The Authentication token to be stored from server tokenType string | 'Bearer' The type of authentication token. expiresIn number The time for which the token will last, in minutes authState object State of the authorized user. Eg: {name: Jhon, email: jhon@auth.com} \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Explanation of the Sign In Object"},{"location":"signout/","text":"Sign Out Implement Sign Out on your React App React Auth Kit has easy to implement Sign In procedures. It supports both Hooks and Higher Order Component for both Functional Components and Class-based Components Sign Out using Hooks Sign In using Hooks need useSignOut hook Add the useSignOut hook in the component then call the signOut inside the component import { useSignOut } from 'react-auth-kit' Demo import React from \"react\" import { useSignOut } from 'react-auth-kit' const SignInComponent = () => { const signOut = useSignOut() return ( <button onClick={() => signOut()}>Sign Out</button> ) } Sign Out using Higher Order Component Sign In using Higher Order Component using withSignOut . Add the withSignOut HOC and call the this.props.signOut function inside the component import { withSignOut } from 'react-auth-kit' Demo import React from \"react\" import { withSignOut } from 'react-auth-kit' class signOutComponent extends React.Component { render(){ return ( <button onClick={() => this.props.signOut()}>Sign Out</button> ) } } export default withSignIn(signInComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Sign Out"},{"location":"signout/#sign-out","text":"Implement Sign Out on your React App React Auth Kit has easy to implement Sign In procedures. It supports both Hooks and Higher Order Component for both Functional Components and Class-based Components","title":"Sign Out"},{"location":"signout/#sign-out-using-hooks","text":"Sign In using Hooks need useSignOut hook Add the useSignOut hook in the component then call the signOut inside the component import { useSignOut } from 'react-auth-kit'","title":"Sign Out using Hooks"},{"location":"signout/#demo","text":"import React from \"react\" import { useSignOut } from 'react-auth-kit' const SignInComponent = () => { const signOut = useSignOut() return ( <button onClick={() => signOut()}>Sign Out</button> ) }","title":"Demo"},{"location":"signout/#sign-out-using-higher-order-component","text":"Sign In using Higher Order Component using withSignOut . Add the withSignOut HOC and call the this.props.signOut function inside the component import { withSignOut } from 'react-auth-kit'","title":"Sign Out using Higher Order Component"},{"location":"signout/#demo_1","text":"import React from \"react\" import { withSignOut } from 'react-auth-kit' class signOutComponent extends React.Component { render(){ return ( <button onClick={() => this.props.signOut()}>Sign Out</button> ) } } export default withSignIn(signInComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Demo"},{"location":"usage/","text":"Usage The use of react-auth-kit library is very easy and straight forward. Auth Provider AuthProvider relies on the context feature of React to pass the Auth down to the components, so you need to make sure that AuthProvider is a parent of the Routing components . You can learn more about this in the API section. import { AuthProvider } from 'react-auth-kit' Demo Integrate AuthProvider before Routes. Typically, the best place is app.js . app.js import React from 'react'; import { AuthProvider } from 'react-auth-kit' import RouteComponent from './routes'; const App = () => ( <AuthProvider authCookieName={\"_a\"} authTimeCookieName={\"_at\"} stateCookieName={\"_s\"} cookieDomain={window.location.hostname} cookieSecure={window.location.protocol === \"https:\"}> <RouteComponent /> </AuthProvider> ); export default App; Props Name Type Default Description children node The content of the component authStorageType 'localstorage' | 'cookie' 'cookie' The type of the auth storage. In localstorage, the tokens store in localStorage. In cookie, the tokens sotore in cookies. authStorageName string '_auth_t' The name of the storage, which stores the auth token. Applicable for both cookies and localStorage. authTimeStorageName string '_auth_time' The name of the storage, which stores the auth time. Applicable for both cookies and localStorage stateStorageName string '_auth_state' The name of the storage, which stores the auth user state. Applicable for both cookies and localStorage cookieDomain string The Domain name for all cookies. \u26a0 If authStorageType = cookie , then you must put a value Refer this for more info cookieSecure boolean false The cookie secure flag. \u26a0 If authStorageType = cookie , then you must put a value Refer this for more info \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Usage"},{"location":"usage/#usage","text":"The use of react-auth-kit library is very easy and straight forward.","title":"Usage"},{"location":"usage/#auth-provider","text":"AuthProvider relies on the context feature of React to pass the Auth down to the components, so you need to make sure that AuthProvider is a parent of the Routing components . You can learn more about this in the API section. import { AuthProvider } from 'react-auth-kit'","title":"Auth Provider"},{"location":"usage/#demo","text":"Integrate AuthProvider before Routes. Typically, the best place is app.js . app.js import React from 'react'; import { AuthProvider } from 'react-auth-kit' import RouteComponent from './routes'; const App = () => ( <AuthProvider authCookieName={\"_a\"} authTimeCookieName={\"_at\"} stateCookieName={\"_s\"} cookieDomain={window.location.hostname} cookieSecure={window.location.protocol === \"https:\"}> <RouteComponent /> </AuthProvider> ); export default App;","title":"Demo"},{"location":"usage/#props","text":"Name Type Default Description children node The content of the component authStorageType 'localstorage' | 'cookie' 'cookie' The type of the auth storage. In localstorage, the tokens store in localStorage. In cookie, the tokens sotore in cookies. authStorageName string '_auth_t' The name of the storage, which stores the auth token. Applicable for both cookies and localStorage. authTimeStorageName string '_auth_time' The name of the storage, which stores the auth time. Applicable for both cookies and localStorage stateStorageName string '_auth_state' The name of the storage, which stores the auth user state. Applicable for both cookies and localStorage cookieDomain string The Domain name for all cookies. \u26a0 If authStorageType = cookie , then you must put a value Refer this for more info cookieSecure boolean false The cookie secure flag. \u26a0 If authStorageType = cookie , then you must put a value Refer this for more info \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Props"}]}